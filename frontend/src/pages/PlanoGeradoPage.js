// pages/PlanoGeradoPage.js
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import questoesService from '../services/questoesService';

const PlanoGeradoPage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { id } = useParams(); // For retrieving a saved plan by ID
  const [plano, setPlano] = useState(null);
  const [cronograma, setCronograma] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    if (id) {
      // If there's an ID in the URL, fetch the saved plan from the backend
      fetchPlanoSalvo(id);
    } else if (location.state && location.state.plano) {
      // If coming from the generation page, use the generated plan
      setPlano(location.state.plano);
      
      if (location.state.planoDetalhado) {
        // Use the detailed plan generated by AI that was saved to the DB
        setCronograma(location.state.planoDetalhado);
        setLoading(false);
      }
    } else {
      navigate('/aprendendo/criar-plano');
    }
  }, [location, navigate, id]);

  const fetchPlanoSalvo = async (planoId) => {
    try {
      const data = await questoesService.getStudyPlan(planoId);
      
      // Parse the configuration and generated plan from the database
      setPlano(JSON.parse(data.plano.configuracao) || {});
      setCronograma(JSON.parse(data.plano.plano_gerado) || {});
    } catch (err) {
      console.error('Erro ao carregar plano:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSalvarPlano = async () => {
    try {
      // If the plano hasn't been saved yet (no ID), it would have come from CriarPlanoPage
      // The creation and saving was already handled there, so this is for updating status
      await questoesService.updateStudyPlanStatus(plano.id, 'salvo');
      alert('Plano atualizado com sucesso!');
    } catch (err) {
      console.error('Erro ao salvar plano:', err);
      alert('Erro ao salvar plano: ' + err.message);
    }
  };

  const handleIniciarPlano = () => {
    // Navigate to study page with the current plano
    navigate('/aprendendo/estudar', { 
      state: { 
        plano: plano,
        cronograma: cronograma
      } 
    });
  };

  if (loading) {
    return <div>Carregando plano...</div>;
  }

  if (error) {
    return (
      <div className="error-page">
        <h2>Erro ao carregar plano</h2>
        <p>{error}</p>
        <button onClick={() => navigate('/aprendendo/criar-plano')}>Voltar para criação</button>
      </div>
    );
  }

  if (!plano) {
    return <div>Plano não encontrado.</div>;
  }

  return (
    <div className="plano-gerado-page">
      <div className="plano-header">
        <h2>Seu Plano de Estudos Gerado com IA</h2>
        <p>Baseado em: {plano.area || plano.perfil?.area} • {Array.isArray(plano.materias) ? plano.materias.join(', ') : plano.perfil?.materias?.join(', ')} • {plano.frequencia || plano.perfil?.frequencia} • {plano.tempoDiario || plano.perfil?.tempoDiario} min/dia</p>
      </div>
      
      <div className="cronograma-semanal">
        <h3>Cronograma Semanal</h3>
        <div className="semana-grid">
          {Object.entries(cronograma).map(([dia, info]) => (
            <div key={dia} className="dia-card">
              <h4>{dia}</h4>
              {typeof info === 'object' ? (
                <>
                  <p><strong>Conteúdo:</strong> {info.conteudo || info.materia}</p>
                  <p><strong>Tempo:</strong> {info.tempo || info.tempoEstudo}</p>
                  <p><strong>Atividade:</strong> {info.atividade || info.descricao}</p>
                </>
              ) : (
                <p>{info}</p>
              )}
              <button 
                className="btn-estudar-agora"
                onClick={handleIniciarPlano}
              >
                Estudar Agora
              </button>
            </div>
          ))}
        </div>
      </div>
      
      <div className="recomendacoes">
        <h3>Recomendações da IA</h3>
        <ul>
          <li>Estude em ambientes silenciosos e bem iluminados</li>
          <li>Faça pausas a cada 45 minutos de estudo</li>
          <li>Revisite os conteúdos com mais dificuldade no final de semana</li>
          <li>Pratique com simulados semanalmente para consolidar o aprendizado</li>
        </ul>
      </div>
      
      <div className="acoes-plano">
        <button 
          className="btn-iniciar-plano"
          onClick={handleIniciarPlano}
        >
          Iniciar Plano de Estudos
        </button>
        <button 
          className="btn-salvar-plano"
          onClick={handleSalvarPlano}
        >
          Salvar Plano
        </button>
      </div>
    </div>
  );
};

export default PlanoGeradoPage;