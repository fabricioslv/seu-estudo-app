#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Script de Deploy Azul/Verde para Ambiente Staging do Projeto Seu-Estudo

.DESCRIPTION
    Este script implementa uma estrat√©gia de blue-green deployment para o ambiente de staging,
    permitindo deploy sem downtime e rollback autom√°tico em caso de erro.

.PARAMETER Environment
    Ambiente para deploy (staging, production)

.PARAMETER AutoRollback
    Habilita rollback autom√°tico em caso de falha

.PARAMETER Timeout
    Timeout em segundos para testes de sa√∫de (padr√£o: 300)

.EXAMPLE
    .\deploy-staging-blue-green.ps1 -Environment staging -AutoRollback
#>

param(
    [string]$Environment = "staging",
    [switch]$AutoRollback = $true,
    [int]$Timeout = 300
)

class BlueGreenDeployer {
    [string]$Environment
    [string]$CurrentActive = "blue"
    [string]$ProjectName = "seu-estudo"
    [bool]$AutoRollback
    [int]$Timeout

    BlueGreenDeployer([string]$env, [bool]$autoRollback, [int]$timeout) {
        $this.Environment = $env
        $this.AutoRollback = $autoRollback
        $this.Timeout = $timeout
    }

    [bool] Execute() {
        Write-Host "üöÄ Iniciando deploy azul/verde para $($this.Environment)" -ForegroundColor Green

        try {
            # 1. Determinar pr√≥ximo ambiente
            $nextEnvironment = ($this.CurrentActive -eq "blue") ? "green" : "blue"

            # 2. Deploy do novo ambiente
            if (-not $this.DeployNewVersion($nextEnvironment)) {
                throw "Falha no deploy do ambiente $nextEnvironment"
            }

            # 3. Testes de sa√∫de
            $healthCheckPassed = $this.PerformHealthChecks($nextEnvironment)

            if (-not $healthCheckPassed) {
                Write-Host "‚ùå Testes de sa√∫de falharam" -ForegroundColor Red

                if ($this.AutoRollback) {
                    Write-Host "üîÑ Iniciando rollback autom√°tico..." -ForegroundColor Yellow
                    return $this.Rollback($nextEnvironment)
                }

                return $false
            }

            # 4. Alternar tr√°fego
            $this.SwitchTraffic($nextEnvironment)

            Write-Host "‚úÖ Deploy conclu√≠do com sucesso. $nextEnvironment est√° ativo." -ForegroundColor Green
            return $true

        }
        catch {
            Write-Host "‚ùå Erro durante o deploy: $($_.Exception.Message)" -ForegroundColor Red
            return $false
        }
    }

    [bool] DeployNewVersion([string]$environment) {
        Write-Host "üì¶ Fazendo deploy para ambiente $environment..." -ForegroundColor Cyan

        try {
            # Build do projeto
            Write-Host "üèóÔ∏è Fazendo build do projeto..." -ForegroundColor Yellow
            npm run build

            if ($LASTEXITCODE -ne 0) {
                throw "Falha no build do projeto"
            }

            # Deploy para Vercel com ambiente espec√≠fico
            $deployCommand = "vercel --prod --scope=$($env:Vercel_SCOPE) -e NODE_ENV=$($this.Environment)"

            Write-Host "üöÄ Executando deploy no Vercel..." -ForegroundColor Yellow
            Invoke-Expression $deployCommand

            if ($LASTEXITCODE -ne 0) {
                throw "Falha no deploy do Vercel"
            }

            Write-Host "‚úÖ Deploy do ambiente $environment conclu√≠do" -ForegroundColor Green
            return $true
        }
        catch {
            Write-Host "‚ùå Falha no deploy do ambiente $environment $($_.Exception.Message)" -ForegroundColor Red
            return $false
        }
    }

    [bool] PerformHealthChecks([string]$environment) {
        Write-Host "üîç Executando testes de sa√∫de no ambiente $environment..." -ForegroundColor Cyan

        $targetUrl = "https://$($this.ProjectName)-$environment.vercel.app"

        try {
            # Teste b√°sico de conectividade
            $healthUrl = "$targetUrl/api/health"

            Write-Host "Verificando health check em: $healthUrl" -ForegroundColor Yellow

            # Para PowerShell, usar Invoke-WebRequest
            $response = Invoke-WebRequest -Uri $healthUrl -TimeoutSec $this.Timeout -ErrorAction Stop

            if ($response.StatusCode -ne 200) {
                Write-Host "‚ùå Teste de sa√∫de falhou: Status $($response.StatusCode)" -ForegroundColor Red
                return $false
            }

            $content = $response.Content | ConvertFrom-Json

            if ($content.status -ne "ok") {
                Write-Host "‚ùå Teste de sa√∫de falhou: Resposta n√£o indica status OK" -ForegroundColor Red
                return $false
            }

            Write-Host "‚úÖ Testes de sa√∫de passaram" -ForegroundColor Green
            return $true

        }
        catch {
            Write-Host "‚ùå Erro durante os testes de sa√∫de: $($_.Exception.Message)" -ForegroundColor Red
            return $false
        }
    }

    [void] SwitchTraffic([string]$environment) {
        Write-Host "üîÑ Alternando tr√°fego para ambiente $environment..." -ForegroundColor Cyan

        try {
            # Atualizar vari√°vel de ambiente que indica ambiente ativo
            $updateCommand = "vercel env add ACTIVE_ENVIRONMENT $environment --scope=$($env:Vercel_SCOPE)"

            Write-Host "Atualizando configura√ß√£o de ambiente ativo..." -ForegroundColor Yellow
            Invoke-Expression $updateCommand

            $this.CurrentActive = $environment
            Write-Host "‚úÖ Tr√°fego alternado para $environment" -ForegroundColor Green

        }
        catch {
            Write-Host "‚ùå Erro ao alternar tr√°fego: $($_.Exception.Message)" -ForegroundColor Red
            throw
        }
    }

    [bool] Rollback([string]$failedEnvironment) {
        Write-Host "üîÑ Executando rollback do ambiente $failedEnvironment..." -ForegroundColor Yellow

        $previousEnvironment = $this.CurrentActive

        try {
            $this.SwitchTraffic($previousEnvironment)
            Write-Host "‚úÖ Rollback conclu√≠do. Ambiente $previousEnvironment est√° ativo." -ForegroundColor Green
            return $true
        }
        catch {
            Write-Host "‚ùå Erro durante o rollback: $($_.Exception.Message)" -ForegroundColor Red
            return $false
        }
    }
}

# Fun√ß√£o principal
function Main {
    # Verificar se Vercel CLI est√° instalado
    try {
        $vercelVersion = vercel --version 2>$null
        if (-not $vercelVersion) {
            throw "Vercel CLI n√£o encontrado"
        }
    }
    catch {
        Write-Host "‚ùå Vercel CLI n√£o est√° instalado. Instale com: npm i -g vercel" -ForegroundColor Red
        exit 1
    }

    # Verificar se est√° logado no Vercel
    try {
        $whoami = vercel whoami 2>$null
        if (-not $whoami) {
            Write-Host "‚ùå N√£o est√° logado no Vercel. Execute: vercel login" -ForegroundColor Red
            exit 1
        }
    }
    catch {
        Write-Host "‚ùå N√£o est√° logado no Vercel. Execute: vercel login" -ForegroundColor Red
        exit 1
    }

    Write-Host "üîê Usu√°rio logado no Vercel: $whoami" -ForegroundColor Green

    # Executar deployer
    $deployer = [BlueGreenDeployer]::new($Environment, $AutoRollback, $Timeout)
    $success = $deployer.Execute()

    if ($success) {
        Write-Host "üéâ Deploy azul/verde conclu√≠do com sucesso!" -ForegroundColor Green
        exit 0
    }
    else {
        Write-Host "üí• Deploy azul/verde falhou!" -ForegroundColor Red
        exit 1
    }
}

# Executar fun√ß√£o principal
Main