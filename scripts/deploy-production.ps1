#!/usr/bin/env pwsh

<#
.SYNOPSIS
    Script de Deploy para Produ√ß√£o do Projeto Seu-Estudo

.DESCRIPTION
    Este script implementa deploy completo para produ√ß√£o com valida√ß√µes,
    rollback autom√°tico e notifica√ß√µes.

.PARAMETER Environment
    Ambiente para deploy (production)

.PARAMETER AutoRollback
    Habilita rollback autom√°tico em caso de falha

.PARAMETER Timeout
    Timeout em segundos para testes de sa√∫de (padr√£o: 600)

.PARAMETER SlackWebhook
    URL do webhook do Slack para notifica√ß√µes

.EXAMPLE
    .\deploy-production.ps1 -Environment production -AutoRollback -SlackWebhook "https://hooks.slack.com/..."
#>

param(
    [string]$Environment = "production",
    [switch]$AutoRollback = $true,
    [int]$Timeout = 600,
    [string]$SlackWebhook = ""
)

class ProductionDeployer {
    [string]$Environment
    [string]$ProjectName = "seu-estudo"
    [bool]$AutoRollback
    [int]$Timeout
    [string]$SlackWebhook
    [string]$StartTime
    [System.Collections.Generic.List[string]]$DeploymentLog

    ProductionDeployer([string]$env, [bool]$autoRollback, [int]$timeout, [string]$slackWebhook) {
        $this.Environment = $env
        $this.AutoRollback = $autoRollback
        $this.Timeout = $timeout
        $this.SlackWebhook = $slackWebhook
        $this.StartTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $this.DeploymentLog = New-Object System.Collections.Generic.List[string]
    }

    [void] Log([string]$message, [string]$level = "INFO") {
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $logMessage = "[$timestamp] [$level] $message"
        $this.DeploymentLog.Add($logMessage)
        Write-Host $logMessage -ForegroundColor $(if ($level -eq "ERROR") { "Red" } elseif ($level -eq "WARN") { "Yellow" } else { "Green" })
    }

    [bool] Execute() {
        $this.Log("üöÄ Iniciando deploy para produ√ß√£o do $($this.ProjectName)", "INFO")
        $this.Log("‚è∞ In√≠cio do deploy: $($this.StartTime)", "INFO")

        try {
            # 1. Pr√©-deploy validations
            if (-not $this.PreDeployValidations()) {
                throw "Valida√ß√µes de pr√©-deploy falharam"
            }

            # 2. Backup de produ√ß√£o (se aplic√°vel)
            $this.CreateBackup()

            # 3. Deploy do backend
            if (-not $this.DeployBackend()) {
                throw "Falha no deploy do backend"
            }

            # 4. Deploy do frontend
            if (-not $this.DeployFrontend()) {
                throw "Falha no deploy do frontend"
            }

            # 5. Testes p√≥s-deploy
            if (-not $this.PostDeployTests()) {
                throw "Testes p√≥s-deploy falharam"
            }

            # 6. Health checks extensivos
            $healthCheckPassed = $this.PerformExtensiveHealthChecks()

            if (-not $healthCheckPassed) {
                $this.Log("‚ùå Testes de sa√∫de falharam", "ERROR")

                if ($this.AutoRollback) {
                    $this.Log("üîÑ Iniciando rollback autom√°tico...", "WARN")
                    return $this.Rollback()
                }

                return $false
            }

            # 7. Atualizar configura√ß√µes de produ√ß√£o
            $this.UpdateProductionConfigs()

            # 8. Notifica√ß√µes de sucesso
            $this.NotifySuccess()

            $this.Log("‚úÖ Deploy para produ√ß√£o conclu√≠do com sucesso!", "INFO")
            return $true

        }
        catch {
            $this.Log("‚ùå Erro durante o deploy: $($_.Exception.Message)", "ERROR")

            if ($this.AutoRollback) {
                $this.Log("üîÑ Tentando rollback autom√°tico...", "WARN")
                $this.Rollback()
            }

            $this.NotifyFailure($_.Exception.Message)
            return $false
        }
    }

    [bool] PreDeployValidations() {
        $this.Log("üîç Executando valida√ß√µes de pr√©-deploy...", "INFO")

        # Verificar se est√° logado no Vercel
        try {
            $whoami = vercel whoami 2>$null
            if (-not $whoami) {
                throw "N√£o est√° logado no Vercel"
            }
            $this.Log("‚úÖ Usu√°rio logado no Vercel: $whoami", "INFO")
        }
        catch {
            throw "‚ùå N√£o est√° logado no Vercel. Execute: vercel login"
        }

        # Verificar vari√°veis de ambiente cr√≠ticas
        $requiredEnvVars = @("DATABASE_URL", "JWT_SECRET", "SUPABASE_URL")
        foreach ($var in $requiredEnvVars) {
            if (-not (Get-ChildItem Env:$var -ErrorAction SilentlyContinue)) {
                $this.Log("‚ö†Ô∏è Vari√°vel de ambiente $var n√£o definida", "WARN")
            }
        }

        # Verificar conectividade com servi√ßos externos
        $this.Log("üì° Testando conectividade com servi√ßos externos...", "INFO")
        # Teste de conectividade com banco de dados, APIs, etc.

        $this.Log("‚úÖ Valida√ß√µes de pr√©-deploy conclu√≠das", "INFO")
        return $true
    }

    [void] CreateBackup() {
        $this.Log("üíæ Criando backup de produ√ß√£o...", "INFO")

        try {
            # Implementar l√≥gica de backup aqui
            # - Backup do banco de dados
            # - Backup de configura√ß√µes cr√≠ticas
            # - Snapshot de arquivos importantes

            $this.Log("‚úÖ Backup criado com sucesso", "INFO")
        }
        catch {
            $this.Log("‚ùå Falha ao criar backup: $($_.Exception.Message)", "ERROR")
            throw
        }
    }

    [bool] DeployBackend() {
        $this.Log("üîß Fazendo deploy do backend...", "INFO")

        try {
            Set-Location "backend"

            # Build do backend
            $this.Log("üèóÔ∏è Fazendo build do backend...", "INFO")
            npm run build:production
            if ($LASTEXITCODE -ne 0) {
                throw "Falha no build do backend"
            }

            # Deploy para Vercel
            $this.Log("üöÄ Executando deploy do backend no Vercel...", "INFO")
            $deployCommand = "vercel --prod --yes --token $($env:Vercel_TOKEN)"

            Invoke-Expression $deployCommand
            if ($LASTEXITCODE -ne 0) {
                throw "Falha no deploy do backend no Vercel"
            }

            Set-Location ".."
            $this.Log("‚úÖ Deploy do backend conclu√≠do", "INFO")
            return $true
        }
        catch {
            $this.Log("‚ùå Falha no deploy do backend: $($_.Exception.Message)", "ERROR")
            return $false
        }
    }

    [bool] DeployFrontend() {
        $this.Log("üé® Fazendo deploy do frontend...", "INFO")

        try {
            Set-Location "frontend"

            # Build do frontend
            $this.Log("üèóÔ∏è Fazendo build do frontend...", "INFO")
            npm run build:production
            if ($LASTEXITCODE -ne 0) {
                throw "Falha no build do frontend"
            }

            # Otimizar assets
            $this.Log("‚ö° Otimizando assets...", "INFO")
            # Implementar otimiza√ß√£o adicional se necess√°rio

            # Deploy para Vercel
            $this.Log("üöÄ Executando deploy do frontend no Vercel...", "INFO")
            $deployCommand = "vercel --prod --yes --token $($env:Vercel_TOKEN)"

            Invoke-Expression $deployCommand
            if ($LASTEXITCODE -ne 0) {
                throw "Falha no deploy do frontend no Vercel"
            }

            Set-Location ".."
            $this.Log("‚úÖ Deploy do frontend conclu√≠do", "INFO")
            return $true
        }
        catch {
            $this.Log("‚ùå Falha no deploy do frontend: $($_.Exception.Message)", "ERROR")
            return $false
        }
    }

    [bool] PostDeployTests() {
        $this.Log("üß™ Executando testes p√≥s-deploy...", "INFO")

        try {
            # Testes de integra√ß√£o
            $this.Log("üîó Executando testes de integra√ß√£o...", "INFO")

            # Testes de performance b√°sicos
            $this.Log("‚ö° Executando testes de performance...", "INFO")

            # Testes de seguran√ßa
            $this.Log("üîí Executando testes de seguran√ßa...", "INFO")

            $this.Log("‚úÖ Testes p√≥s-deploy conclu√≠dos", "INFO")
            return $true
        }
        catch {
            $this.Log("‚ùå Falha nos testes p√≥s-deploy: $($_.Exception.Message)", "ERROR")
            return $false
        }
    }

    [bool] PerformExtensiveHealthChecks() {
        $this.Log("üè• Executando testes de sa√∫de extensivos...", "INFO")

        $backendUrl = "https://$($this.ProjectName)-backend.vercel.app"
        $frontendUrl = "https://$($this.ProjectName).vercel.app"

        try {
            # Health check do backend
            $backendHealthUrl = "$backendUrl/api/health"
            $this.Log("Verificando health check do backend: $backendHealthUrl", "INFO")

            $response = Invoke-WebRequest -Uri $backendHealthUrl -TimeoutSec $this.Timeout -ErrorAction Stop
            if ($response.StatusCode -ne 200) {
                throw "Backend health check falhou: Status $($response.StatusCode)"
            }

            $content = $response.Content | ConvertFrom-Json
            if ($content.status -ne "ok") {
                throw "Backend health check n√£o indica status OK"
            }

            # Health check do frontend
            $frontendHealthUrl = "$frontendUrl"
            $this.Log("Verificando disponibilidade do frontend: $frontendHealthUrl", "INFO")

            $response = Invoke-WebRequest -Uri $frontendHealthUrl -TimeoutSec $this.Timeout -ErrorAction Stop
            if ($response.StatusCode -ne 200) {
                throw "Frontend n√£o est√° acess√≠vel: Status $($response.StatusCode)"
            }

            # Testes adicionais
            $this.Log("üîç Executando testes funcionais b√°sicos...", "INFO")
            # Adicionar testes funcionais espec√≠ficos aqui

            $this.Log("‚úÖ Testes de sa√∫de extensivos passaram", "INFO")
            return $true

        }
        catch {
            $this.Log("‚ùå Erro durante os testes de sa√∫de: $($_.Exception.Message)", "ERROR")
            return $false
        }
    }

    [void] UpdateProductionConfigs() {
        $this.Log("‚öôÔ∏è Atualizando configura√ß√µes de produ√ß√£o...", "INFO")

        try {
            # Atualizar configura√ß√µes cr√≠ticas
            # - CDN configurations
            # - DNS settings
            # - SSL certificates
            # - Monitoring configurations

            $this.Log("‚úÖ Configura√ß√µes de produ√ß√£o atualizadas", "INFO")
        }
        catch {
            $this.Log("‚ùå Erro ao atualizar configura√ß√µes: $($_.Exception.Message)", "ERROR")
            throw
        }
    }

    [void] NotifySuccess() {
        $endTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $duration = (Get-Date) - (Get-Date $this.StartTime)

        $message = @"
üöÄ *Deploy para Produ√ß√£o Conclu√≠do com Sucesso!*

üìä *Detalhes do Deploy:*
‚Ä¢ Projeto: $($this.ProjectName)
‚Ä¢ Ambiente: $($this.Environment)
‚Ä¢ In√≠cio: $($this.StartTime)
‚Ä¢ Fim: $endTime
‚Ä¢ Dura√ß√£o: $($duration.Hours)h $($duration.Minutes)m $($duration.Seconds)s

üîó *URLs de Produ√ß√£o:*
‚Ä¢ Frontend: https://$($this.ProjectName).vercel.app
‚Ä¢ Backend: https://$($this.ProjectName)-backend.vercel.app

‚úÖ Todos os testes passaram!
"@

        if ($this.SlackWebhook) {
            $this.SendSlackNotification($message, "good")
        }

        $this.Log("üîî Notifica√ß√£o de sucesso enviada", "INFO")
    }

    [void] NotifyFailure([string]$errorMessage) {
        $message = @"
‚ùå *Deploy para Produ√ß√£o Falhou*

üî• *Erro:* $errorMessage

üìä *Detalhes do Deploy:*
‚Ä¢ Projeto: $($this.ProjectName)
‚Ä¢ Ambiente: $($this.Environment)
‚Ä¢ In√≠cio: $($this.StartTime)
‚Ä¢ Falha: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

üîó *URLs Atuais (se aplic√°vel):*
‚Ä¢ Frontend: https://$($this.ProjectName).vercel.app
‚Ä¢ Backend: https://$($this.ProjectName)-backend.vercel.app

‚ö†Ô∏è Verificar logs para mais detalhes
"@

        if ($this.SlackWebhook) {
            $this.SendSlackNotification($message, "danger")
        }

        $this.Log("üîî Notifica√ß√£o de falha enviada", "ERROR")
    }

    [void] SendSlackNotification([string]$message, [string]$color) {
        try {
            $payload = @{
                text = $message
                username = "Deploy Bot"
                icon_emoji = ":rocket:"
                attachments = @(
                    @{
                        color = $color
                        fields = @(
                            @{
                                title = "Projeto"
                                value = $this.ProjectName
                                short = $true
                            }
                            @{
                                title = "Ambiente"
                                value = $this.Environment
                                short = $true
                            }
                        )
                    }
                )
            }

            Invoke-RestMethod -Uri $this.SlackWebhook -Method Post -Body ($payload | ConvertTo-Json -Depth 4) -ContentType "application/json"
        }
        catch {
            $this.Log("‚ùå Falha ao enviar notifica√ß√£o do Slack: $($_.Exception.Message)", "ERROR")
        }
    }

    [bool] Rollback() {
        $this.Log("üîÑ Executando rollback...", "WARN")

        try {
            # Implementar l√≥gica de rollback aqui
            # - Reverter para vers√£o anterior conhecida
            # - Restaurar backup se necess√°rio
            # - Notificar equipe sobre rollback

            $this.Log("‚úÖ Rollback conclu√≠do", "WARN")
            return $true
        }
        catch {
            $this.Log("‚ùå Erro durante o rollback: $($_.Exception.Message)", "ERROR")
            return $false
        }
    }
}

# Fun√ß√£o principal
function Main {
    Write-Host "üéØ Seu-Estudo - Deploy para Produ√ß√£o" -ForegroundColor Cyan
    Write-Host "=====================================" -ForegroundColor Cyan

    # Executar deployer
    $deployer = [ProductionDeployer]::new($Environment, $AutoRollback, $Timeout, $SlackWebhook)
    $success = $deployer.Execute()

    if ($success) {
        Write-Host "üéâ Deploy para produ√ß√£o conclu√≠do com sucesso!" -ForegroundColor Green
        exit 0
    }
    else {
        Write-Host "üí• Deploy para produ√ß√£o falhou!" -ForegroundColor Red
        exit 1
    }
}

# Executar fun√ß√£o principal
Main